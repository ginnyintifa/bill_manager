stop(simpleError("Please specify valid amount of purchase."))
}
# Check mode
mode <- match.arg(arg = mode, choices = c("1", "2"))
# Load database
if (!file.exists(data_file)) {
database <- NULL
} else {
load(data_file) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_buy = person_buy, amount = amount, mode = mode,
date_input = today, status = "due",
stringsAsFactors = FALSE)
# Check if similar input already exists
if (!is.null(database)) {
rows <- which(database$date_buy == date_buy & database$amount == amount &
database$person_buy == person_buy)
if (length(rows) > 0) {
cat("There are", length(rows), "rows in the database with the same date of purchase, person of purchase and amount of purchase:\n")
for (i in rows) {
print(database[i, ])
}
check <- utils::menu(choices = c("Yes, save input", "No, discard input"),
title = "Are you sure this is a new input?")
if (check == "No") {
cat("No input added.\n")
return(NULL)
}
# Append to database
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = data_file)
input
}
add_input(item_desc = "Bing", person_buy = "Ning Yilin", amount = 12.9, mode = "1")
add_input <- function(item_desc = "", date_buy = Sys.Date(), person_buy = "",
amount = 0, mode = 1) {
today <- Sys.Date()
# Check item description
if (item_desc %in% c("", " ")) {
warning(simpleWarning(
"You are not required but advised to describe your purchase."
))
}
# Check date of purchase
if (class(date_buy) != "Date") {
date_buy <- as.Date(date_buy)
}
if (is.na(date_buy)) {
stop(simpleError(
"Please specify correct date of purchase. Default is current date."
))
} else {
if (date_buy > today) {
stop(simpleError("Please specify a reasonable date of purchase."))
}
# Check the person who make purchase
person_buy <- match.arg(arg = person_buy, choices = c("Ginny Li", "Ning Yilin"))
# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Check mode
mode <- match.arg(arg = mode, choices = c("1", "2"))
# Load database
if (!file.exists(data_file)) {
database <- NULL
} else {
load(data_file) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_buy = person_buy, amount = amount, mode = mode,
date_input = today, status = "due",
stringsAsFactors = FALSE)
# Check if similar input already exists
if (!is.null(database)) {
rows <- which(database$date_buy == date_buy & database$amount == amount &
database$person_buy == person_buy)
if (length(rows) > 0) {
cat("There are", length(rows), "rows in the database with the same date of purchase, person of purchase and amount of purchase:\n")
for (i in rows) {
print(database[i, ])
}
check <- utils::menu(choices = c("Yes, save input", "No, discard input"),
title = "Are you sure this is a new input?")
if (check == 2) {
cat("No input added.\n")
return(NULL)
}
# Append to database
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = data_file)
input
}
add_input(item_desc = "Bing", person_buy = "Ning Yilin", amount = 12.9, mode = "1")
View(database)
load("~/Google Drive/Projects/Active/BillManager/database.RData")
View(database)
calculate <- function() {
# Check whether there exist any records
if (!file.exists(data_file)) {
stop(simpleError("There is no record yet.\n"))
}
load(data_file)
# Check whether there is any outstanding balance
if (all(data_file$status == "clear")) {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
return(0)
}
# Compute outstanding balance
data_due <- database[database$status == "due", ]
paid_by_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "1"])
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
if (nrow(exclude_nyl) > 0) {
paid_by_nyl <- paid_by_nyl - exclude_nyl
}
paid_by_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "1"])
exclude_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "2"])
if (nrow(exclude_gl) > 0) {
paid_by_gl <- paid_by_gl - exclude_gl
}
gl_to_pay_nyl <- (paid_by_nyl - paid_by_gl) / 2
if (gl_to_pay_nyl > 0) {
message(simpleMessage(sprintf(
"Ginny Li should pay Ning Yilin S$ %.2f", gl_to_pay_nyl
)))
} else if (gl_to_pay_nyl < 0) {
message(simpleMessage(sprintf(
"Ning Yilin should pay Ginny Li S$ %.2f", -gl_to_pay_nyl
)))
} else {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
}
calculate()
traceback()
View(database)
all(data_file$status == "clear")
calculate <- function() {
# Check whether there exist any records
if (!file.exists(data_file)) {
stop(simpleError("There is no record yet.\n"))
}
load(data_file)
# Check whether there is any outstanding balance
if (all(database$status == "clear")) {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
return(0)
}
# Compute outstanding balance
data_due <- database[database$status == "due", ]
paid_by_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "1"])
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
if (nrow(exclude_nyl) > 0) {
paid_by_nyl <- paid_by_nyl - exclude_nyl
}
paid_by_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "1"])
exclude_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "2"])
if (nrow(exclude_gl) > 0) {
paid_by_gl <- paid_by_gl - exclude_gl
}
gl_to_pay_nyl <- (paid_by_nyl - paid_by_gl) / 2
if (gl_to_pay_nyl > 0) {
message(simpleMessage(sprintf(
"Ginny Li should pay Ning Yilin S$ %.2f", gl_to_pay_nyl
)))
} else if (gl_to_pay_nyl < 0) {
message(simpleMessage(sprintf(
"Ning Yilin should pay Ginny Li S$ %.2f", -gl_to_pay_nyl
)))
} else {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
}
calculate()
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
data_due <- database[database$status == "due", ]
paid_by_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "1"])
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
calculate <- function() {
# Check whether there exist any records
if (!file.exists(data_file)) {
stop(simpleError("There is no record yet.\n"))
}
load(data_file)
# Check whether there is any outstanding balance
if (all(database$status == "clear")) {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
return(0)
}
# Compute outstanding balance
data_due <- database[database$status == "due", ]
paid_by_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "1"])
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
paid_by_nyl <- paid_by_nyl - exclude_nyl
paid_by_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "1"])
exclude_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "2"])
paid_by_gl <- paid_by_gl - exclude_gl
gl_to_pay_nyl <- (paid_by_nyl - paid_by_gl) / 2
if (gl_to_pay_nyl > 0) {
message(simpleMessage(sprintf(
"Ginny Li should pay Ning Yilin S$ %.2f", gl_to_pay_nyl
)))
} else if (gl_to_pay_nyl < 0) {
message(simpleMessage(sprintf(
"Ning Yilin should pay Ginny Li S$ %.2f", -gl_to_pay_nyl
)))
} else {
message(simpleMessage("There is no outstanding balance. We are good.\n"))
}
calculate()
paid_by_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "1"])
exclude_nyl <- sum(data_due$amount[data_due$person_buy == "Ning Yilin" &
data_due$mode == "2"])
paid_by_nyl <- paid_by_nyl - exclude_nyl
paid_by_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "1"])
exclude_gl <- sum(data_due$amount[data_due$person_buy == "Ginny Li" &
data_due$mode == "2"])
paid_by_gl <- paid_by_gl - exclude_gl
add_input(item_desc = "Bing", person_buy = "Ning Yilin", amount = 12.9, mode = "1")
add_input(item_desc = "Fairprice grocery", person_buy = "Ning Yilin", amount = 135, mode = "1")
calculate()
clear_balance <- function() {
# Check whether there exist any records
if (!file.exists(data_file)) {
stop(simpleError("Are you crazy? There is no record yet.\n"))
}
load(data_file)
# Check whether there is any outstanding balance
if (all(database$status == "clear")) {
message(simpleMessage("Seriously? There is no outstanding balance at all.\n"))
return(NULL)
}
# Update database to clear outstanding balance
rows <- which(database$status == "due")
cat(length(rows), "items cleared:\n")
for (i in rows) {
print(database[i, ])
}
database$status[rows] <- "clear"
save(database, file = data_file)
}
clear_balance()
load("~/Google Drive/Projects/Active/BillManager/database.RData")
View(database)
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
if (!file.exists(data_file)) {
database <- NULL
} else {
load(data_file) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_buy, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = data_file)
input
}
rm(list = ls())
DataFile <- "database.RData"
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
if (!file.exists(data_file)) {
database <- NULL
} else {
load(data_file) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_buy, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_input(item_desc = "Gas", date_buy = Sys.Date(), person_pay = "Ning Yilin", person_share = "both", amount = 32)
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
if (!file.exists(data_file)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_buy, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_input(item_desc = "Gas", date_buy = Sys.Date(), person_pay = "Ning Yilin", person_share = "both", amount = 32)
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_buy, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_input(item_desc = "Gas", date_buy = Sys.Date(), person_pay = "Ning Yilin", person_share = "both", amount = 32)
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_input(item_desc = "Gas", date_buy = Sys.Date(), person_pay = "Ning Yilin", person_share = "both", amount = 32)
add_input <- function(item_desc, date_buy, person_pay, person_share, amount) {
today <- Sys.Date()
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_buy = date_buy,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = today, status = "due",
stringsAsFactors = FALSE)
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_input(item_desc = "Gas", date_buy = Sys.Date(), person_pay = "Ning Yilin", person_share = "both", amount = 32)
tm(list = ls())
rm(list = ls())
DataFile <- "database.RData"
Today <- Sys.Date()
add_purchase <- function(item_desc = "", date_pay = Sys.Date(),
person_pay, person_share = "both", amount = 0) {
# Check item description
if (item_desc %in% c("", " ")) {
warning(simpleWarning(
"You are not required but advised to describe your purchase."
))
}
# Check date of purchase
if (class(date_pay) != "Date") {
date_pay <- as.Date(date_pay)
}
if (is.na(date_pay)) {
stop(simpleError(
"Please specify correct date of purchase. Default is current date."
))
} else {
if (date_pay > Today) {
stop(simpleError("Please specify a reasonable date of purchase."))
}
# Check the person who paid and people to share the expense. If the amount
# should only be born by one person, `person_share` should be that person.
person_pay <- match.arg(arg = person_pay,
choices = c("Ginny Li", "Ning Yilin"))
person_share <- match.arg(arg = person_pay,
choices = c("both", "Ginny Li", "Ning Yilin"))
# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Load database
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_pay = date_pay,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = Today, status = "due",
stringsAsFactors = FALSE)
# Check if similar input already exists
if (!is.null(database)) {
rows <- which(database$date_pay == date_pay & database$amount == amount &
database$person_pay == person_pay &
database$person_share == person_share)
if (length(rows) > 0) {
cat("There are", length(rows), "rows in the database with the same date of purchase, person of purchase, people to share the expense, and amount of purchase:\n")
for (i in rows) {
print(database[i, ])
}
check <- utils::menu(choices = c("Yes, save input", "No, discard input"),
title = "Are you sure this is a new input?")
if (check == 2) {
cat("No input added.\n")
return(NULL)
}
# Append to database
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_purchase(person_pay = "Ning Yilin", amount = 32)
add_purchase <- function(item_desc = "", date_pay = Sys.Date(),
person_pay, person_share = "both", amount = 0) {
# Check item description
if (item_desc %in% c("", " ")) {
warning(simpleWarning(
"You are not required but are advised to describe your purchase."
))
}
# Check date of purchase
if (class(date_pay) != "Date") {
date_pay <- as.Date(date_pay)
}
if (is.na(date_pay)) {
stop(simpleError(
"Please specify correct date of purchase. Default is current date."
))
} else {
if (date_pay > Today) {
stop(simpleError("Please specify a reasonable date of purchase."))
}
# Check the person who paid and people to share the expense. If the amount
# should only be born by one person, `person_share` should be that person.
person_pay <- match.arg(arg = person_pay,
choices = c("Ginny Li", "Ning Yilin"))
person_share <- match.arg(arg = person_share,
choices = c("both", "Ginny Li", "Ning Yilin"))
# Check amount
amount <- as.numeric(amount)
if (is.na(amount)) {
stop(simpleError("Please specify valid amount of purchase."))
}
if (amount <= 0) {
stop(simpleError("Please specify valid amount of purchase."))
}
# Load database
if (!file.exists(DataFile)) {
database <- NULL
} else {
load(DataFile) # R object: database
}
# Compile new input
input <- data.frame(item_desc = item_desc, date_pay = date_pay,
person_pay = person_pay, person_share = person_share,
amount = amount, date_input = Today, status = "due",
stringsAsFactors = FALSE)
# Check if similar input already exists
if (!is.null(database)) {
rows <- which(database$date_pay == date_pay & database$amount == amount &
database$person_pay == person_pay &
database$person_share == person_share)
if (length(rows) > 0) {
cat("There are", length(rows), "rows in the database with the same date of purchase, person of purchase, people to share the expense, and amount of purchase:\n")
for (i in rows) {
print(database[i, ])
}
check <- utils::menu(choices = c("Yes, save input", "No, discard input"),
title = "Are you sure this is a new input?")
if (check == 2) {
cat("No input added.\n")
return(NULL)
}
# Append to database
cat("New input appended:\n")
database <- rbind(database, input)
save(database, file = DataFile)
input
}
add_purchase(person_pay = "Ning Yilin", amount = 32)
