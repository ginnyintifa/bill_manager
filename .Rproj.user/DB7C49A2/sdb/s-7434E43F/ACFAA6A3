{
    "collab_server" : "",
    "contents" : "DataFile <- \"database.RData\"\nArchiveFolder <- \"archive\"\nif (!dir.exists(ArchiveFolder)) {\n  dir.create(ArchiveFolder)\n}\nToday <- Sys.Date()\n\nload_database <- function() {\n  if (!file.exists(DataFile)) {\n    database <- NULL\n  } else {\n    load(DataFile) # R object: database\n  }\n  database\n}\nform_entry <- function(item_desc = \"\", date_pay = Sys.Date(), \n                       person_pay, person_share = \"both\", amount = 0) {\n  # Check item description\n  if (item_desc %in% c(\"\", \" \")) {\n    warning(simpleWarning(\n      \"You are not required but are advised to describe your purchase.\"\n    ))\n  }\n  # Check date of purchase\n  if (class(date_pay) != \"Date\") {\n    date_pay <- as.Date(date_pay)\n  }\n  if (is.na(date_pay)) {\n    stop(simpleError(\n      \"Please specify correct date of purchase. Default is current date.\"\n    ))\n  } else {\n    if (date_pay > Today) {\n      stop(simpleError(\"Please specify a reasonable date of purchase.\"))\n    }\n  }\n  # Check the person who paid and people to share the expense. If the amount \n  # should only be born by one person, `person_share` should be that person.\n  person_pay <- match.arg(arg = person_pay, \n                          choices = c(\"Ginny Li\", \"Ning Yilin\"))\n  person_share <- match.arg(arg = person_share, \n                            choices = c(\"both\", \"Ginny Li\", \"Ning Yilin\"))\n  # Decide status based on person_pay and person_share: if they are the same, \n  # this entry is simply for bill keeping and does not need to be included in \n  # caculation.\n  if (person_pay == person_share) {\n    status <- \"ignore\"\n  } else {\n    status <- \"due\"\n  }\n  # Check amount\n  amount <- as.numeric(amount)\n  if (is.na(amount)) {\n    stop(simpleError(\"Please specify valid amount of purchase.\"))\n  }\n  if (amount <= 0) {\n    stop(simpleError(\"Please specify valid amount of purchase.\"))\n  }\n  # Return new entry\n  data.frame(item_desc = item_desc, date_pay = date_pay, \n             person_pay = person_pay, person_share = person_share, \n             amount = amount, date_input = Today, status = status, \n             stringsAsFactors = FALSE)\n}\ncheck_entry <- function(entry) {\n  # Load database\n  database <- load_database()\n  # Check if similar entry already exists\n  dup <- NULL\n  if (!is.null(database)) {\n    rows <- which(database$date_pay == entry$date_pay & \n                    database$amount == entry$amount & \n                    database$person_pay == entry$person_pay & \n                    database$person_share == entry$person_share)\n    if (length(rows) > 0) {\n      dup <- database[rows, ]\n    }\n  }\n  list(entry = entry, duplicates = dup)\n}\nadd_entry <- function(entry) {\n  database <- load_database()\n  save(\n    database, \n    file = file.path(ArchiveFolder, paste0(\"database\", Sys.Date(), \".RData\"))\n  )\n  # Compile new entry\n  if (is.null(database)) {\n    entry <- cbind(row_id = 1, entry)\n  } else {\n    entry <- cbind(row_id = max(database$row_id) + 1, entry)\n  }\n  database <- rbind(database, entry)\n  save(database, file = DataFile)\n}\ncalculate_entry <- function(entry) {\n  if (entry$status != \"due\") {\n    return(0)\n  }\n  if (entry$person_share == \"both\") {\n    if (entry$person_pay == \"Ning Yilin\") {\n      entry$amount / 2\n    } else {\n      -entry$amount / 2\n    }\n  } else if (entry$person_share == \"Ning Yilin\") {\n    -entry$amount\n  } else {\n    entry$amount\n  }\n}\ncalculate <- function() {\n  # Check whether there exist any records\n  if (!file.exists(DataFile)) {\n    stop(simpleError(\"There is no record yet.\\n\"))\n  }\n  load(DataFile)\n  # Check whether there is any outstanding balance\n  if (!any(database$status == \"due\")) {\n    message(simpleMessage(\"There is no outstanding balance. We are good.\\n\"))\n    return(0)\n  }\n  # Compute outstanding balance\n  sum(sapply(which(database$status == \"due\"), function(i) {\n    calculate_entry(entry = database[i, ])\n  }))\n}\ndisplay_balance <- function(gl_to_pay_nyl) {\n  if (gl_to_pay_nyl > 0) {\n    sprintf(\n      \"Ginny Li should pay Ning Yilin S$ %.2f.\", gl_to_pay_nyl\n    )\n  } else if (gl_to_pay_nyl < 0) {\n    sprintf(\n      \"Ning Yilin should pay Ginny Li S$ %.2f.\", -gl_to_pay_nyl\n    )\n  } else {\n    \"There is no outstanding balance. We are good.\"\n  }\n}\nclear_balance <- function(amount_cleared = NULL) {\n  # Check whether there exist any records\n  database <- load_database()\n  save(\n    database, \n    file = file.path(ArchiveFolder, paste0(\"database\", Sys.Date(), \".RData\"))\n  )\n  # Check whether there is any outstanding balance\n  if (!any(database$status == \"due\")) {\n    return(\"There is no outstanding balance to clear.\")\n  }\n  # Update database to clear outstanding balance\n  rows <- which(database$status == \"due\")\n  # cat(length(rows), \"items cleared:\\n\")\n  # for (i in rows) {\n  #   print(database[i, ])\n  # }\n  database$status[rows] <- \"cleared\"\n  save(database, file = DataFile)\n  # Check whether there is any left_over\n  gl_to_pay_nyl <- calculate()\n  if (is.null(amount_cleared)) {\n    amount_cleared <- gl_to_pay_nyl\n  } else {\n    if (amount_cleared < abs(gl_to_pay_nyl)) {\n      if (gl_to_pay_nyl < 0) {\n        entry <- form_entry(item_desc = \"Yet to be cleared\", date_pay = Today, \n                            person_pay = \"Ginny Li\", person_share = \"Ning Yilin\", \n                            amount = abs(gl_to_pay_nyl) - amount_cleared)\n      } \n      if (gl_to_pay_nyl > 0) {\n        entry <- form_entry(item_desc = \"Yet to be cleared\", date_pay = Today, \n                            person_pay = \"Ning Yilin\", person_share = \"Ginny Li\", \n                            amount = gl_to_pay_nyl - amount_cleared)\n      } \n      add_entry(entry)\n    }\n  }\n  sprintf(\"Outstanding balance of %.2f is cleared.\", amount_cleared)\n}\ndelete_entry <- function(row_id) {\n  database <- load_database()\n  database <- database[!(database$row_id %in% row_id), ]\n  save(database, file = \"database.RData\")\n}\n",
    "created" : 1501330036693.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1947417797",
    "id" : "ACFAA6A3",
    "lastKnownWriteTime" : 1501339782,
    "last_content_update" : 1501339782317,
    "path" : "~/Google Drive/Projects/Active/BillManager/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}